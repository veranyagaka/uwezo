import { PrismaClient } from "@prisma/client";

declare global {
    var prisma: PrismaClient | undefined
};

const prismadb = globalThis.prisma || new PrismaClient();
if (process.env.NODE_ENV !== "production") globalThis.prisma = prismadb;

export default prismadb;

// import: This is a JavaScript ES6 module syntax used to bring in dependencies or specific exports from another file or package.
// { PrismaClient }: The curly braces {} are used to destructure a named export. PrismaClient is a named export from the @prisma/client package.
// "@prisma/client": The string inside double quotes represents the package we are importing from, which is the Prisma client library. This library is auto-generated by Prisma and connects to your database.
// Function: This line imports the PrismaClient class, which will be used to interact with the database.


// declare global: This is a TypeScript syntax used to augment the global scope. It allows you to declare new properties or variables that will be globally available.
// { ... }: The curly braces define the block scope for the global declaration. Everything inside is considered part of the global declaration.
// var prisma: PrismaClient | undefined:
// var: A JavaScript keyword for declaring a variable with global scope (though it's now less preferred than let and const).
// prisma: The variable name, which will be attached to the global object.
// PrismaClient | undefined: The type of the variable, which can either be an instance of PrismaClient or undefined. The | symbol represents a union type in TypeScript, meaning prisma can be either type.
// Function: This declares prisma as a global variable that is either a PrismaClient instance or undefined, ensuring it is accessible throughout the application.


// const: Declares a constant variable that cannot be reassigned after its initial value is set.
// prismadb: The variable name where the PrismaClient instance is stored.
// globalThis.prisma: globalThis is a standard object representing the global scope (works both in the browser and Node.js). globalThis.prisma checks if the global prisma variable has been initialized.
// ||: The logical OR operator. It checks if the value on the left (globalThis.prisma) is truthy. If it is falsy (e.g., undefined), it evaluates the right-hand side (new PrismaClient()).
// new PrismaClient(): The new keyword creates a new instance of the PrismaClient class. This is used if globalThis.prisma is not already initialized.
// Function: This line checks if there’s an existing PrismaClient instance globally (globalThis.prisma). If not, it creates a new instance and assigns it to prismadb.

// if: A conditional statement that executes code based on a specific condition.
// (process.env.NODE_ENV !== "production"): This condition checks if the environment variable NODE_ENV is not set to "production". This is typically used to differentiate between production and development environments.
// process.env: The process object in Node.js gives access to environment variables. NODE_ENV is a commonly used variable to distinguish between environments like "development", "test", or "production".
// !==: The strict inequality operator, meaning it checks if the value on the left is not equal to the value on the right.
// globalThis.prisma = prismadb: If the condition is true (i.e., not in production), it assigns the prismadb instance to globalThis.prisma, storing the PrismaClient instance globally for reuse.
// Function: This prevents creating a new PrismaClient instance every time a file is imported in development mode, reducing the risk of connection issues like hitting the database connection limit.

// export default: This syntax exports a single value (default export) from the module so that other files can import it using a simple import statement.
// prismadb: The prismadb constant, which holds the PrismaClient instance, is exported as the default export.
// Function: This makes prismadb (the initialized or global PrismaClient instance) available for use in other parts of the application.
// Summary of the Code’s Purpose:
// This code ensures that the Prisma database client (PrismaClient) is instantiated only once during development to prevent issues like multiple connections to the database.
// In production, a new instance is created each time the file is imported, but in development, it stores the instance in globalThis.prisma to reuse it across multiple imports.